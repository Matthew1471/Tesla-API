#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of Tesla-API <https://github.com/Matthew1471/Tesla-API>
# Copyright (C) 2025 Matthew1471!
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
Tesla® API Documentation Generator

This module is responsible for generating some documentation for the Tesla® API in AsciiDoc format.
It processes endpoint metadata and writes the resulting documentation to disk.

Usage:
1. The module loads endpoint metadata from a JSON file containing API details.
2. It processes each endpoint by sorting them.
3. The generated documentation includes information about endpoints, their URIs, descriptions.
4. An index file summarizing all endpoints and their descriptions is also generated.

Note:
- The generated documentation can be used for reference by developers using the Tesla® API.
"""

import json         # This script makes heavy use of JSON parsing.
import os.path      # We check whether a file exists and manipulate filepaths.

# This script's version.
VERSION = 0.1

class DocumentationGenerator:
    """
    A class to generate generic documentation.
    This class can be used by other documentation generators.
    """

    @staticmethod
    def get_header_settings_and_variables():
        """
        Generates a header containing reference information, document settings, and variables.

        This function constructs a header with reference information, document settings,
        and variables for documentation generation.

        Returns:
            str: The AsciiDoc generated header content.
        """

        # Reference.
        result = 'Matthew1471 <https://github.com/matthew1471[@Matthew1471]>;\n\n'

        # Document Settings.
        result += '// Document Settings:\n\n'

        # Set the autogenerated section IDs to be in GitHub format,
        # so links work consistently across both platforms.
        result += '// Set the ID Prefix and ID Separators to be consistent with GitHub so links '
        result += 'work irrespective of rendering platform.'
        result += ' (https://docs.asciidoctor.org/asciidoc/latest/sections/id-prefix-and-separator/)\n'
        result += ':idprefix:\n'
        result += ':idseparator: -\n\n'

        # This project uses JSON code highlighting by default.
        result += '// Any code blocks will be in JSON by default.\n'
        result += ':source-language: json\n\n'

        # This will convert the admonitions to be icons rather than text (in and out of GitHub).
        result += 'ifndef::env-github[:icons: font]\n\n'

        result += '// Set the admonitions to have icons (Github Emojis) if rendered on GitHub'
        result += ' (https://blog.mrhaki.com/2016/06/awesome-asciidoctor-using-admonition.html).\n'
        result += 'ifdef::env-github[]\n'
        result += ':status:\n'
        result += ':caution-caption: :fire:\n'
        result += ':important-caption: :exclamation:\n'
        result += ':note-caption: :paperclip:\n'
        result += ':tip-caption: :bulb:\n'
        result += ':warning-caption: :warning:\n'
        result += 'endif::[]\n\n'

        # The document's metadata.
        result += '// Document Variables:\n'
        result += ':release-version: 1.0\n'
        result += ':url-org: https://github.com/Matthew1471\n'
        result += ':url-repo: {url-org}/Tesla-API\n'
        result += ':url-contributors: {url-repo}/graphs/contributors\n\n'

        return result

    @staticmethod
    def get_introduction_section(description=None, file_depth=0):
        """
        Generate the introduction section for Tesla-API documentation.

        This function constructs the introduction section for the Tesla-API documentation.
        It includes a heading, an optional description, and details about the project.

        Args:
            description (str, optional): An optional description to be included in the introduction.
            file_depth (int, optional): The depth of the file in the directory structure.

        Returns:
            str: The AsciiDoc content for the introduction section.
        """

        # Heading.
        result = '== Introduction\n\n'

        if description:
            result += f'{description}\n\n'

        result += 'Tesla-API is an unofficial project providing an API wrapper and the '
        result += 'documentation for Tesla(R)\'s products and services.\n\n'

        result += 'More details on the project are available from the xref:'
        result += f'{"../" * (file_depth + 1)}README.adoc[project\'s homepage].\n'

        return result

class IndexDocumentationGenerator:
    """
    A class to generate an index file for the documentation.
    """

    @staticmethod
    def get_header_section(file_depth=1):
        """
        Generate the AsciiDoc index heading for the API documentation.

        Args:
            file_depth (int, optional): How many sub-directories deep the file will be stored in.

        Returns:
            str: A string containing the AsciiDoc index heading.

        Note:
            This method generates the index heading for the API documentation,
            including the table of contents and introductory sections.
        """

        # Heading.
        result = '= Owner API\n'

        # Table of Contents.
        result += ':toc:\n'

        # Shared block of data.
        result += DocumentationGenerator.get_header_settings_and_variables()

        # Introduction.
        result += DocumentationGenerator.get_introduction_section(file_depth=file_depth)

        return result

    @staticmethod
    def get_endpoints_section(endpoint_metadata):
        """
        Generate the AsciiDoc endpoint documentation for the API documentation.

        Args:
            endpoint_metadata (dict): Contains the endpoint documentation metadata.

        Returns:
            str: A string containing the AsciiDoc endpoint documentation index.

        Note:
            This method generates the endpoint documentation table.
        """

        # Endpoints Heading.
        result = '\n== Endpoints\n\n'

        # Add table.
        result += '[cols="1,1,1,2", options="header"]\n'
        result += '|===\n'
        result += '|Name\n'
        result += '|URI\n'
        result += '|Type\n'
        result += '|Auth\n\n'

        # Write each of the endpoints.
        for key in endpoint_metadata:
            metadata = endpoint_metadata[key]

            # Add the item.
            result += f'|`{key}`\n'
            result += f'|`{metadata["URI"]}`\n'
            result += f'|`{metadata["TYPE"]}`\n'
            result += f'|{metadata["AUTH"]}\n\n'

        # Close the table.
        result += '|==='

        return result

    @staticmethod
    def create_index(metadata):
        """
        Generate and create the index documentation for all the endpoints.

        This function takes endpoint metadata and constructs the index documentation,
        containing information about the API endpoints, their URIs, and descriptions.

        Args:
            metadata (dict): A dictionary containing metadata for different endpoints.

        Returns:
            None: The index documentation is written to a file specified by the function.
        """

        # Generate a suitable filename to store our documentation in.
        filename = '../../Documentation/Cloud/Owner API/README.adoc'

        # Create any required sub-directories.
        os.makedirs(os.path.dirname(filename), exist_ok=True)

        # Build the output.
        output = IndexDocumentationGenerator.get_header_section(file_depth=2)

        # Add the endpoints section.
        output += IndexDocumentationGenerator.get_endpoints_section(metadata)

        # Write the output to the file.
        with open(filename, mode='w', encoding='utf-8') as text_file:
            text_file.write(output)

def main():
    """
    Generate Tesla-API documentation in AsciiDoc.

    This function loads endpoint metadata, attempts to call undocumented endpoints,
    determines their schema, and writes the corresponding documentation.

    It performs the following steps:
    - Output program banner.
    - Load endpoint metadata from 'resources/ownerapi_endpoints.json'.
    - Create the index page using IndexDocumentationGenerator.
    """

    # Output program banner.
    banner = f'Tesla Generate Documentation V{VERSION}\n'
    hyphens = f'{"-" * len(banner)}\n'
    print(f'{hyphens}{banner}{hyphens}')

    # Load endpoints.
    with open('resources/ownerapi_endpoints.json', mode='r', encoding='utf-8') as json_file:
        data = json.load(json_file)

        # Add leading slash.
        for key in data:
            # Skip this specific item.
            if key == 'MATTERMOST':
                continue

            uri = data[key]['URI']
            if not uri.startswith('/'):
                data[key]['URI'] = '/' + data[key]['URI']

        # Sort by URL.
        sorted_data = dict(sorted(data.items(), key=lambda item: item[1]["URI"]))

    # Create index page.
    IndexDocumentationGenerator.create_index(sorted_data)

# Launch the main method if invoked directly.
if __name__ == '__main__':
    main()